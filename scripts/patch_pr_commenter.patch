*** Begin Patch
*** Add File: scripts/pr_commenter.py
+"""
+Post the AI summary (reports/summary.txt) as a comment on the pull request.
+Requires GITHUB_TOKEN (available in Actions).
+"""
+import os
+import sys
+import json
+import requests
+
+def load_summary(path="reports/summary.txt"):
+    if not os.path.exists(path):
+        return None
+    with open(path, "r") as f:
+        return f.read()
+
+def post_pr_comment(token, repo, pr_number, body):
+    url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
+    headers = {
+        "Authorization": f"token {token}",
+        "Accept": "application/vnd.github+json"
+    }
+    resp = requests.post(url, headers=headers, json={"body": body})
+    if resp.status_code not in (200, 201):
+        print(f"Failed to post comment: {resp.status_code} {resp.text}")
+        sys.exit(1)
+    print("âœ… Posted PR comment.")
+
+def main():
+    # GitHub Actions provides these environment variables
+    github_event_name = os.getenv("GITHUB_EVENT_NAME")
+    if github_event_name != "pull_request":
+        print("Not a pull_request event â€” skipping PR comment.")
+        return
+
+    github_event_path = os.getenv("GITHUB_EVENT_PATH")
+    if not github_event_path or not os.path.exists(github_event_path):
+        print("No GITHUB_EVENT_PATH found â€” can't determine PR number. Skipping.")
+        return
+
+    with open(github_event_path, "r") as f:
+        event = json.load(f)
+
+    pr_number = event.get("number") or (event.get("pull_request", {}).get("number"))
+    repo = os.getenv("GITHUB_REPOSITORY")
+    token = os.getenv("GITHUB_TOKEN")
+
+    if not pr_number or not repo or not token:
+        print("Missing PR number, repo, or GITHUB_TOKEN. Skipping PR comment.")
+        return
+
+    summary = load_summary()
+    if not summary:
+        print("No summary found to post.")
+        return
+
+    # Trim summary if too long (GitHub comments have limits)
+    max_len = 64000
+    if len(summary) > max_len:
+        summary = summary[:max_len] + "\n\n*(truncated)*"
+
+    body = "ðŸ”’ **Security Scan Summary (automated)**\n\n" + "```\n" + summary + "\n```\n\n"
+    body += "_This comment is generated by the AI Security Scanner workflow._"
+
+    post_pr_comment(token, repo, pr_number, body)
+
+if __name__ == "__main__":
+    main()
+
*** End Patch
